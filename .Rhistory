id = src_subject_id,
event = eventname,
age = interview_age,
height = anthroheightcalc
)
str(df_long$age)
descriptives_table <- df_long %>%
select(event, age, height) %>%
mutate(event = factor(event)) %>%
tbl_summary(
by = event,
missing = "no",
label = list(height ~ "Height"),
statistic = list(all_continuous() ~ "{mean} ({sd})", all_categorical() ~ "{p}%"),
) %>%
modify_header(all_stat_cols() ~ "**{level}**<br>N = {n}") %>%
bold_labels() %>%
italicize_levels() %>%
modify_spanning_header(all_stat_cols() ~ "**Assessment Wave**")
theme_gtsummary_compact()
descriptives_table
model <- lmer(height ~ age + (1 + age | id), data = df_long, REML = T)
# Model with random intercepts only
model_ri_only <- lmer(height ~ age + (1 | id), data = df_long, REML = T)
model_ri_only
# Model with random slopes only, without intercepts
model_rs_only <- lmer(height ~ age + (0 + age | id), data = df_long, REML = T)
model_rs_only
df_long <- na.omit(df_long)
df_long$height <- scale(df_long$age)
df_long$age <- scale(df_long$age)
model <- lmer(height ~ age + (1 + age | id), data = df_long, REML = T)
# Model with random intercepts only
model_ri_only <- lmer(height ~ age + (1 | id), data = df_long, REML = T)
df_long <- na.omit(df_long)
df_long$height <- scale(df_long$height)
df_long$age <- scale(df_long$age)
model <- lmer(height ~ age + (1 + age | id), data = df_long, REML = T)
# Model with random intercepts only
model_ri_only <- lmer(height ~ age + (1 | id), data = df_long, REML = T)
df <- readRDS(data_path)
# Create and mutate the dataframe
df_long <- df %>%
select(src_subject_id, eventname, interview_age, anthroheightcalc) %>%
filter(eventname %in% c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1", "2_year_follow_up_y_arm_1", "3_year_follow_up_y_arm_1")) %>%
drop_na(anthroheightcalc) %>%
arrange(src_subject_id, eventname) %>%
mutate(
src_subject_id = factor(src_subject_id),
eventname = factor(eventname, levels = c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1", "2_year_follow_up_y_arm_1", "3_year_follow_up_y_arm_1"), labels = c("Baseline", "Year_1", "Year_2", "Year_3")),
interview_age = as.numeric(interview_age),
anthroheightcalc = round(as.numeric(anthroheightcalc), 2)
) %>%
rename(
id = src_subject_id,
event = eventname,
age = interview_age,
height = anthroheightcalc
)
library(tidyverse) # Collection of R packages for data science
library(gtsummary) # Publication-ready tables
library(rstatix) # Statistical Tests in tidy format
library(lme4) # Linear mixed-effects models
descriptives_table <- df_long %>%
select(event, age, height) %>%
mutate(event = factor(event)) %>%
tbl_summary(
by = event,
missing = "no",
label = list(height ~ "Height"),
statistic = list(all_continuous() ~ "{mean} ({sd})", all_categorical() ~ "{p}%"),
) %>%
modify_header(all_stat_cols() ~ "**{level}**<br>N = {n}") %>%
bold_labels() %>%
italicize_levels() %>%
modify_spanning_header(all_stat_cols() ~ "**Assessment Wave**")
theme_gtsummary_compact()
descriptives_table
df_long <- na.omit(df_long)
model <- lmer(height ~ age + (1 + age | id), data = df_long, REML = T)
# Model with random intercepts only
model_ri_only <- lmer(height ~ age + (1 | id), data = df_long, REML = T)
model_ri_only
df_long$height <- scale(df_long$height)
df_long$age <- scale(df_long$age)
model <- lmer(height ~ age + (1 + age | id), data = df_long, REML = T)
# Model with random intercepts only
model_ri_only <- lmer(height ~ age + (1 | id), data = df_long, REML = T)
model_ri_only
# Model with random slopes only, without intercepts
model_rs_only <- lmer(height ~ age + (0 + age | id), data = df_long, REML = T)
model_rs_only
model <- lmer(height ~ age + (1 + age | id), data = df_long, REML = T)
rm(list=ls())
library(ggplot2)
# Calculate means for each time point for height and weight
mean_height <- df_wide %>%
summarise(across(starts_with("height"), mean, na.rm = TRUE))
#| echo: FALSE # The content of this code block will not be shown when rendered
#| output: FALSE # Output from this code block will not be shown when rendered
# This code configures knitr code chunk options
knitr::opts_chunk$set(
echo = T, message = F, warning = F, error = F, output = T,
comment = NA, cache = T, code_folding = T,
R.options = list(width = 220, digits = 3),
fig.align = "center",
out.width = "75%", fig.asp = .75
)
#| echo: FALSE # The content of this code block will not be shown when rendered
#| output: FALSE # Output from this code block will not be shown when rendered
#| cache: FALSE
# This code loads the data to be used for the example
library(tidyverse)
# Set the data path
data_path <- "/Users/shawes/ABCD/data/rds/abcd_5.0_rds/core-rds-5.0/non-imaging_excluding_nt_5.0.rds"
# Read the data
df <- readRDS(data_path)
# Create and mutate the dataframe
df_long <- df %>%
select(src_subject_id, eventname, anthroheightcalc, anthroweightcalc) %>%
filter(eventname %in% c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1", "2_year_follow_up_y_arm_1", "3_year_follow_up_y_arm_1")) %>%
drop_na(anthroheightcalc, anthroweightcalc) %>%
arrange(src_subject_id, eventname) %>%
mutate(
src_subject_id = factor(src_subject_id),
eventname = factor(eventname, levels = c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1", "2_year_follow_up_y_arm_1", "3_year_follow_up_y_arm_1"), labels = c("Baseline", "Year_1", "Year_2", "Year_3")),
anthroheightcalc = round(as.numeric(anthroheightcalc), 2),
anthroweightcalc = round(as.numeric(anthroweightcalc), 2)
) %>%
rename(
id = src_subject_id,
event = eventname,
height = anthroheightcalc,
weight = anthroweightcalc
)
df_long <- df_long %>%
group_by(id) %>%
filter(all(c("Baseline", "Year_1", "Year_2", "Year_3") %in% event)) %>%
ungroup()
library(tidyverse)    # Collection of R packages for data science
library(rstatix)      # Pipe-friendly framework for basic statistical tests
library(DT)           # Rendering interactive data tables
library(lavaan)       #
descriptives_table <- df_long %>%
select(event, height, weight) %>%
mutate(event = factor(event)) %>%
tbl_summary(
by = event,
missing = "no",
label = list(height ~ "Height", weight ~ "Weight"),
statistic = list(all_continuous() ~ "{mean} ({sd}) )", all_categorical() ~ "{p}%"),
) %>%
modify_header(all_stat_cols() ~ "**{level}**<br>N = {n}") %>%
bold_labels() %>%
italicize_levels() %>%
modify_spanning_header(all_stat_cols() ~ "**Assessment Wave**")
theme_gtsummary_compact()
descriptives_table
# Reshape data from long to wide format
df_wide <- df_long %>%
pivot_wider(
id_cols = c(id),
names_from = event,
values_from = c(height, weight),
names_sep = "_"
)
df_wide <- na.omit(df_wide)
# Load necessary library
library(lavaan)
# Specify the multivariate latent growth curve model
model <- '
# Intercept and slope factors for variable 1 (height)
i_var1 =~ 1*height_Baseline + 1*height_Year_1 + 1*height_Year_2 + 1*height_Year_3
s_var1 =~ 0*height_Baseline + 1*height_Year_1 + 2*height_Year_2 + 3*height_Year_3
# Intercept and slope factors for variable 2 (weight)
i_var2 =~ 1*weight_Baseline + 1*weight_Year_1 + 1*weight_Year_2 + 1*weight_Year_3
s_var2 =~ 0*weight_Baseline + 1*weight_Year_1 + 2*weight_Year_2 + 3*weight_Year_3
'
# Fit the model using FIML for handling missing data
fit <- sem(model, data = df_wide, missing = "fiml")
# Check the summary to identify potential issues
summary(fit, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)
library(ggplot2)
# Calculate means for each time point for height and weight
mean_height <- df_wide %>%
summarise(across(starts_with("height"), mean, na.rm = TRUE))
mean_weight <- df_wide %>%
summarise(across(starts_with("weight"), mean, na.rm = TRUE))
# Reshape the data for plotting
mean_height_long <- pivot_longer(mean_height, cols = everything(), names_to = "Time", values_to = "Mean_Height")
mean_weight_long <- pivot_longer(mean_weight, cols = everything(), names_to = "Time", values_to = "Mean_Weight")
# Combine height and weight data
mean_data <- full_join(mean_height_long, mean_weight_long, by = "Time")
# Plot the mean trajectories
ggplot(mean_data, aes(x = Time)) +
geom_line(aes(y = Mean_Height, color = "Height"), size = 1.2) +
geom_line(aes(y = Mean_Weight, color = "Weight"), size = 1.2) +
labs(title = "Mean Growth Trajectories", y = "Mean Value", x = "Time Point") +
theme_minimal() +
scale_color_manual(values = c("Height" = "blue", "Weight" = "red")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot individual growth curves for height
ggplot(df_long, aes(x = event, y = height, group = id)) +
geom_line(alpha = 0.2) +
labs(title = "Individual Growth Curves for Height", y = "Height", x = "Time Point") +
theme_minimal()
# Plot individual growth curves for weight
ggplot(df_long, aes(x = event, y = weight, group = id)) +
geom_line(alpha = 0.2) +
labs(title = "Individual Growth Curves for Weight", y = "Weight", x = "Time Point") +
theme_minimal()
# Extract intercepts and slopes
intercepts <- as.data.frame(ranef(fit)$id)[, 1:2]
# Extract factor scores
factor_scores <- lavPredict(fit, type = "lv")
# Convert to a data frame
factor_scores_df <- as.data.frame(factor_scores)
# Rename the columns for clarity
colnames(factor_scores_df) <- c("Intercept_Height", "Slope_Height", "Intercept_Weight", "Slope_Weight")
# Summary of the model
summary(fit, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)
# Plot histograms of intercepts and slopes
ggplot(factor_scores_df, aes(x = Intercept_Height)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Intercepts for Height", x = "Intercept", y = "Frequency") +
theme_minimal()
ggplot(factor_scores_df, aes(x = Slope_Height)) +
geom_histogram(binwidth = 0.05, fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Slopes for Height", x = "Slope", y = "Frequency") +
theme_minimal()
ggplot(factor_scores_df, aes(x = Intercept_Weight)) +
geom_histogram(binwidth = 0.5, fill = "red", alpha = 0.7) +
labs(title = "Distribution of Intercepts for Weight", x = "Intercept", y = "Frequency") +
theme_minimal()
ggplot(factor_scores_df, aes(x = Slope_Weight)) +
geom_histogram(binwidth = 0.05, fill = "red", alpha = 0.7) +
labs(title = "Distribution of Slopes for Weight", x = "Slope", y = "Frequency") +
theme_minimal()
library(patchwork)
# Calculate means for each time point for height and weight
mean_height <- df_wide %>%
summarise(across(starts_with("height"), mean, na.rm = TRUE))
mean_weight <- df_wide %>%
summarise(across(starts_with("weight"), mean, na.rm = TRUE))
# Reshape the data for plotting
mean_height_long <- pivot_longer(mean_height, cols = everything(), names_to = "Time", values_to = "Mean_Height")
mean_weight_long <- pivot_longer(mean_weight, cols = everything(), names_to = "Time", values_to = "Mean_Weight")
# Plot the mean trajectories for height
height_plot <- ggplot(mean_height_long, aes(x = Time, y = Mean_Height)) +
geom_line(color = "blue", size = 1.2) +
labs(title = "Mean Growth Trajectory for Height", y = "Mean Height", x = "Time Point") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the mean trajectories for weight
weight_plot <- ggplot(mean_weight_long, aes(x = Time, y = Mean_Weight)) +
geom_line(color = "red", size = 1.2) +
labs(title = "Mean Growth Trajectory for Weight", y = "Mean Weight", x = "Time Point") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
height_plot
# Calculate means for each time point for height and weight
mean_height <- df_wide %>%
summarise(across(starts_with("height"), mean, na.rm = TRUE))
mean_weight <- df_wide %>%
summarise(across(starts_with("weight"), mean, na.rm = TRUE))
# Print the mean values to check
print(mean_height)
print(mean_weight)
# Reshape the data for plotting
mean_height_long <- pivot_longer(mean_height, cols = everything(), names_to = "Time", values_to = "Mean_Height")
mean_weight_long <- pivot_longer(mean_weight, cols = everything(), names_to = "Time", values_to = "Mean_Weight")
# Print the reshaped data to check
print(mean_height_long)
print(mean_weight_long)
# Plot the mean trajectories for height
height_plot <- ggplot(mean_height_long, aes(x = Time, y = Mean_Height, group = 1)) +
geom_line(color = "blue", size = 1.2) +
geom_point(color = "blue") +
labs(title = "Mean Growth Trajectory for Height", y = "Mean Height", x = "Time Point") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the mean trajectories for weight
weight_plot <- ggplot(mean_weight_long, aes(x = Time, y = Mean_Weight, group = 1)) +
geom_line(color = "red", size = 1.2) +
geom_point(color = "red") +
labs(title = "Mean Growth Trajectory for Weight", y = "Mean Weight", x = "Time Point") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Combine the plots side by side using patchwork
combined_plot <- height_plot + weight_plot
# Display the combined plot
combined_plot
height_plot <- ggplot(mean_height_long, aes(x = Time, y = Mean_Height, group = 1)) +
geom_line(color = "blue", size = 1.2) +
geom_point(color = "blue") +
labs(title = "Mean Growth Trajectory for Height", y = "Mean Height", x = "Time Point") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
height_plot
weight_plot
# Load necessary libraries
library(tidyverse)
library(patchwork)
# Calculate means for each time point for height and weight
mean_height <- df_wide %>%
summarise(across(starts_with("height"), mean, na.rm = TRUE))
mean_weight <- df_wide %>%
summarise(across(starts_with("weight"), mean, na.rm = TRUE))
# Print the mean values to check
print(mean_height)
print(mean_weight)
# Reshape the data for plotting
mean_height_long <- pivot_longer(mean_height, cols = everything(), names_to = "Time", values_to = "Mean_Height")
mean_weight_long <- pivot_longer(mean_weight, cols = everything(), names_to = "Time", values_to = "Mean_Weight")
# Print the reshaped data to check
print(mean_height_long)
print(mean_weight_long)
# Plot the mean trajectories for height
height_plot <- ggplot(mean_height_long, aes(x = Time, y = Mean_Height, group = 1)) +
geom_line(color = "blue", size = 1.2) +
geom_point(color = "blue") +
labs(title = "Mean Growth Trajectory for Height", y = "Mean Height", x = "Time Point") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the mean trajectories for weight
weight_plot <- ggplot(mean_weight_long, aes(x = Time, y = Mean_Weight, group = 1)) +
geom_line(color = "red", size = 1.2) +
geom_point(color = "red") +
labs(title = "Mean Growth Trajectory for Weight", y = "Mean Weight", x = "Time Point") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Combine the plots side by side using patchwork
combined_plot <- height_plot + weight_plot
# Display the combined plot
print(combined_plot)
# Load necessary libraries
library(tidyverse)
library(patchwork)
# Calculate means for each time point for height and weight
mean_height <- df_wide %>%
summarise(across(starts_with("height"), mean, na.rm = TRUE))
mean_weight <- df_wide %>%
summarise(across(starts_with("weight"), mean, na.rm = TRUE))
# Reshape the data for plotting
mean_height_long <- pivot_longer(mean_height, cols = everything(), names_to = "Time", values_to = "Mean_Height")
mean_weight_long <- pivot_longer(mean_weight, cols = everything(), names_to = "Time", values_to = "Mean_Weight")
# Plot the mean trajectories for height
height_plot <- ggplot(mean_height_long, aes(x = Time, y = Mean_Height, group = 1)) +
geom_line(color = "blue", size = 1.2) +
geom_point(color = "blue") +
labs(title = "Mean Growth Trajectory for Height", y = "Mean Height", x = "Time Point") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the mean trajectories for weight
weight_plot <- ggplot(mean_weight_long, aes(x = Time, y = Mean_Weight, group = 1)) +
geom_line(color = "red", size = 1.2) +
geom_point(color = "red") +
labs(title = "Mean Growth Trajectory for Weight", y = "Mean Weight", x = "Time Point") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Combine the plots side by side using patchwork
#combined_plot <- height_plot + weight_plot
# Display plots
print(height_plot)
print(weight_plot)
####
# Extract factor scores
factor_scores <- lavPredict(fit, type = "lv")
# Convert to a data frame
factor_scores_df <- as.data.frame(factor_scores)
# Rename the columns for clarity
colnames(factor_scores_df) <- c("Intercept_Height", "Slope_Height", "Intercept_Weight", "Slope_Weight")
# Summary of the model
summary(fit, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)
# Plot histograms of intercepts and slopes
ggplot(factor_scores_df, aes(x = Intercept_Height)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Intercepts for Height", x = "Intercept", y = "Frequency") +
theme_minimal()
ggplot(factor_scores_df, aes(x = Slope_Height)) +
geom_histogram(binwidth = 0.05, fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Slopes for Height", x = "Slope", y = "Frequency") +
theme_minimal()
ggplot(factor_scores_df, aes(x = Intercept_Weight)) +
geom_histogram(binwidth = 0.5, fill = "red", alpha = 0.7) +
labs(title = "Distribution of Intercepts for Weight", x = "Intercept", y = "Frequency") +
theme_minimal()
ggplot(factor_scores_df, aes(x = Slope_Weight)) +
geom_histogram(binwidth = 0.05, fill = "red", alpha = 0.7) +
labs(title = "Distribution of Slopes for Weight", x = "Slope", y = "Frequency") +
theme_minimal()
#####
# Combine the data from all classes
#data <- rbind(class1, class2, class3)
# Fit the Growth Mixture Model
gmm <- hlme(value ~ time,
random = ~ time,
subject = "id",
mixture = ~ time,
data = data,
ng = 3,
B = list(value = c(1, 0, 0, 0)
# Estimate the model
fit <- lavaan::sem(model, data = df_wide, missing = "FIML")
rm(list=ls())
#| echo: FALSE # The content of this code block will not be shown when rendered
#| output: FALSE # Output from this code block will not be shown when rendered
# This code configures knitr code chunk options
knitr::opts_chunk$set(
echo = T, message = F, warning = F, error = F, output = T,
comment = NA, cache = T, code_folding = T,
R.options = list(width = 220, digits = 3),
fig.align = "center",
out.width = "75%", fig.asp = .75
)
#| echo: FALSE # The content of this code block will not be shown when rendered
#| output: FALSE # Output from this code block will not be shown when rendered
#| cache: FALSE
# This code loads the data to be used for the example
library(tidyverse)
# Set the data path
data_path <- "/Users/shawes/ABCD/data/rds/abcd_5.0_rds/core-rds-5.0/non-imaging_excluding_nt_5.0.rds"
# Read the data
df <- readRDS(data_path)
# Create and mutate the dataframe
df_long <- df %>%
select(src_subject_id, eventname, anthroheightcalc, anthroweightcalc) %>%
filter(eventname %in% c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1", "2_year_follow_up_y_arm_1", "3_year_follow_up_y_arm_1")) %>%
drop_na(anthroheightcalc, anthroweightcalc) %>%
arrange(src_subject_id, eventname) %>%
mutate(
src_subject_id = factor(src_subject_id),
eventname = factor(eventname, levels = c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1", "2_year_follow_up_y_arm_1", "3_year_follow_up_y_arm_1"), labels = c("Baseline", "Year_1", "Year_2", "Year_3")),
anthroheightcalc = round(as.numeric(anthroheightcalc), 2),
anthroweightcalc = round(as.numeric(anthroweightcalc), 2)
) %>%
rename(
id = src_subject_id,
event = eventname,
height = anthroheightcalc,
weight = anthroweightcalc
)
df_long <- df_long %>%
group_by(id) %>%
filter(all(c("Baseline", "Year_1", "Year_2", "Year_3") %in% event)) %>%
ungroup()
library(tidyverse)    # Collection of R packages for data science
library(lcmm)
library(lavaan)       #
library(rstatix)      # Pipe-friendly framework for basic statistical tests
library(DT)           # Rendering interactive data tables
descriptives_table <- df_long %>%
select(event, height, weight) %>%
mutate(event = factor(event)) %>%
tbl_summary(
by = event,
missing = "no",
label = list(height ~ "Height", weight ~ "Weight"),
statistic = list(all_continuous() ~ "{mean} ({sd}) )", all_categorical() ~ "{p}%"),
) %>%
modify_header(all_stat_cols() ~ "**{level}**<br>N = {n}") %>%
bold_labels() %>%
italicize_levels() %>%
modify_spanning_header(all_stat_cols() ~ "**Assessment Wave**")
theme_gtsummary_compact()
descriptives_table
set.seed(2002)
gmm1 <- hlme(height ~ event, subject = "id_numeric", random=~1, ng = 1, data =
df_long)
src_subject_id = as.numeric(src_subject_id)
df_long <- df %>%
select(src_subject_id, eventname, anthroheightcalc, anthroweightcalc) %>%
filter(eventname %in% c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1", "2_year_follow_up_y_arm_1", "3_year_follow_up_y_arm_1")) %>%
drop_na(anthroheightcalc, anthroweightcalc) %>%
arrange(src_subject_id, eventname) %>%
mutate(
src_subject_id = as.numeric(src_subject_id),
eventname = factor(eventname, levels = c("baseline_year_1_arm_1", "1_year_follow_up_y_arm_1", "2_year_follow_up_y_arm_1", "3_year_follow_up_y_arm_1"), labels = c("Baseline", "Year_1", "Year_2", "Year_3")),
anthroheightcalc = round(as.numeric(anthroheightcalc), 2),
anthroweightcalc = round(as.numeric(anthroweightcalc), 2)
) %>%
rename(
id = src_subject_id,
event = eventname,
height = anthroheightcalc,
weight = anthroweightcalc
)
df_long <- df_long %>%
group_by(id) %>%
filter(all(c("Baseline", "Year_1", "Year_2", "Year_3") %in% event)) %>%
ungroup()
descriptives_table <- df_long %>%
select(event, height, weight) %>%
mutate(event = factor(event)) %>%
tbl_summary(
by = event,
missing = "no",
label = list(height ~ "Height", weight ~ "Weight"),
statistic = list(all_continuous() ~ "{mean} ({sd}) )", all_categorical() ~ "{p}%"),
) %>%
modify_header(all_stat_cols() ~ "**{level}**<br>N = {n}") %>%
bold_labels() %>%
italicize_levels() %>%
modify_spanning_header(all_stat_cols() ~ "**Assessment Wave**")
theme_gtsummary_compact()
descriptives_table
set.seed(2002)
gmm1 <- hlme(height ~ event, subject = "id_numeric", random=~1, ng = 1, data =
df_long)
set.seed(2002)
gmm1 <- hlme(height ~ event, subject = "id", random=~1, ng = 1, data =
df_long)
