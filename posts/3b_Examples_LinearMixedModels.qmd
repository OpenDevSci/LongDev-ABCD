---
title: "Linear Mixed Models: Random Intercept and Slope"
author: "Biostatistics Working Group"

---

# LMM: Intercept & Slope {.unnumbered}

## Overview

<p>

The Linear Mixed Model with a random intercept and slope (LMM:ris) extends the traditional fixed-effect linear regression by incorporating both a subject-specific random intercept and a random slope. This allows each participant to have their own unique intercept and slope values, reflecting individual starting points and rates of change, in addition to the overall mean-level (fixed-effect) trajectory.

In this example, we will utilize the LMM:ris to analyze height trajectories obtained across multiple measurement occasions for a sample of youth participating in the ABCD Study. Our primary objective is to understand the stability and evolution in height measurements, while factoring in the clustered nature of observations within individuals over time. The LMM:ris facilitates this by concurrently modeling an overarching sample mean trajectory (fixed effect) and individual variations (random effects) in both starting points (intercepts) and growth rates (slopes) around this mean trajectory.

</p>

## Preliminary Setup

::: panel-tabset
### Install Packages {.tabset .tabset-fade .tabset-pills}

::: blue
> **This code installs the r packages necessary for this example, if
> they are not already installed**

```{r pckg-install}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE

# Create a list of required packages
packages_required <- c("tidyverse","rstatix","DT","lme4","report","broom","gridExtra","easystats","gtsummary")

# Check which packages are not installed and install them
packages_to_install <- setdiff(packages_required, rownames(installed.packages()))
if (length(packages_to_install) > 0) {
    install.packages(packages_to_install)
}

# Load the required packages
lapply(packages_required, library, character.only = TRUE)

```
:::

### Load Packages

::: blue
**This code loads the r libraries necessary for this example**

```{r lib-load}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE

library(tidyverse)    # Collection of R packages for data science
library(rstatix)      # Pipe-friendly framework for basic statistical tests
library(DT)           # Rendering interactive data tables
library(lme4)         # Linear mixed-effects models
library(report)       # Easy reporting of regression analyses
library(broom)        # Tidy and augment statistical models output
library(gridExtra)    # Arrange multiple grid-based plots on a page
library(easystats)    #
library(gtsummary)    #
```
:::

### Config Options

::: blue
**This code configures knitr code chunk options**

```{r config}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE

knitr::opts_chunk$set(echo = T, message=F, warning=F, error=F, 
                      comment=NA, cache=T, code_folding=T,
                      R.options=list(width=220, digits = 3),
                      fig.align='center', 
                      out.width='75%', fig.asp=.75)
```
:::
:::

## Descriptives Overview

::: panel-tabset
### Read and View Data {.tabset .tabset-fade .tabset-pills}

::: blue
**This code reads in and shows the data to be used in the current
example**

```{r read-data}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE
#| cache: FALSE

# Set the data paths
data_path_1 <- "/Users/shawes/ABCD/data/rds/abcd_5.0_rds/demo5.0.rds"
data_path_2 <- "/Users/shawes/ABCD/data/rds/abcd_5.0_rds/core-rds-5.0/non-imaging_excluding_nt_5.0.rds"

# Read the data
data_demographics <- readRDS(data_path_1)
data_nonimaging <- readRDS(data_path_2)

# Subset the nonimaging data to include desired variables
selected_vars <- c("src_subject_id", "eventname", "nihtbx_totalcomp_fc", "anthroweightcalc", "anthroheightcalc")
subset_data <- data_nonimaging[, selected_vars]

library(dplyr)
# # Merge the datasets on 'src_subject_id' and 'eventname'
merged_data <- data_demographics %>%
  full_join(subset_data, by = c("src_subject_id", "eventname"))

# Inspect the merged data structure
str(merged_data)

# Define event names to be retained in the analysis and convert variables to appropriate data types
eventnames_to_include <- c("baseline_year_1_arm_1",
                           "1_year_follow_up_y_arm_1",
                           "2_year_follow_up_y_arm_1",
                           "3_year_follow_up_y_arm_1",
                           "4_year_follow_up_y_arm_1")

df <- merged_data %>%
  filter(eventname %in% eventnames_to_include) %>%
  mutate(
    src_subject_id = as.factor(src_subject_id),
    eventname = factor(eventname, levels = eventnames_to_include, ordered = TRUE),
    age = as.numeric(age),
    sex = as.factor(sex),
    race.4level = as.factor(race.4level),
    hisp = as.factor(hisp),
    high.educ.bl = as.factor(high.educ.bl),
    household.income.bl = as.factor(household.income.bl),
    acs_raked_propensity_score = as.numeric(acs_raked_propensity_score),
    rel_family_id.bl = as.factor(rel_family_id.bl),
    site_id_l = as.factor(site_id_l),
    nihtbx_totalcomp_fc = as.numeric(nihtbx_totalcomp_fc),
    anthroweightcalc = as.numeric(anthroweightcalc),
    anthroheightcalc = as.numeric(anthroheightcalc)
  ) %>%
  # Exclude cases from unused assessment waves
  filter(!is.na(eventname))

```
:::

### Descriptives

::: blue
**This code creates a descriptives table**

```{r descriptives}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE

descriptives_table <- df %>%
  select(eventname, sex, race.4level, hisp, anthroweightcalc) %>%
  mutate(eventname = factor(eventname, labels = c("Baseline", "Year 1","Year 2","Year 3","Year 4"))) %>%
  mutate(sex = factor(sex, labels = c("Female", "Male"))) %>%
  tbl_summary(
    by = eventname,
    missing = "no",
    label = list(sex ~ "Sex", race.4level ~ "Race", hisp ~ "Hispanic", 
                 anthroweightcalc ~ "Weight"),
    statistic = list(all_continuous() ~ "{mean} ({sd}) )", all_categorical() ~ "{p}%"),
  ) %>%
modify_header(all_stat_cols() ~ "**{level}**<br>N = {n}") %>%
  bold_labels() %>%
  italicize_levels() %>%
  modify_spanning_header(all_stat_cols() ~ "**Assessment Wave**")
theme_gtsummary_compact()

descriptives_table
```

:::
:::
  
## Results 
<div class = "blue">

::: panel-tabset
### Build Model {.tabset .tabset-fade .tabset-pills}

::: blue
  
The code fits a linear mixed model to examine the 'Height' variable across time points ('eventname'). It incorporates both random intercepts and slopes for the time points ('eventname') within each participant ('src_subject_id') to capture individual-level variability in both starting values and rates of change over time. The results of the model are then printed to provide a detailed summary of the fitted model parameters.

**STEP 1: Compute LMM with Random Intercepts and Slopes**
```{r build-model-1}
#| class.source: 'fold-hide'
#| message: FALSE
#| warning: FALSE
#| echo: TRUE

## Linear Mixed Model with a random intercept and random slope (LMM-ris)
random_intercepts_slopes <- lmer(anthroheightcalc ~ 1 + eventname + (1|src_subject_id), data = df, REML=T)

print(random_intercepts_slopes)

```

```{r model-output}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE

## Output and reports extending from the LMM-ris analyses
summary(random_intercepts_slopes)
confint(random_intercepts_slopes, level = 0.95, method = "Wald")
report_performance(random_intercepts_slopes)

```

The code fits a Linear Mixed Model (LMM:ris) to predict children's height based on different time points (denoted as eventname). Individual variability is captured through random intercepts associated with each participant (src_subject_id). The results suggest a significant change in height across the time points, with the model accounting for 89% (r round(conditional_R2, 2)) of the total variation and 37% (r round(marginal_R2, 2)) attributed to the fixed effects alone.

In the model, the linear term for eventname has an estimated effect of r round(model_summary$coefficients["eventname.L", "Estimate"], 2), indicating a significant increase in height across time points. Additionally, there's variability in initial height across participants, reflected by a random intercept standard deviation of r round(random_effects["src_subject_id", "Std.Dev."], 2).

### Model Plots

The following set of plots are used to facilitate model diagnostics. The first is a histogram showcasing the distribution of random intercepts for individual subjects, indicating variations in height not explained by the fixed effects. The second depicts residuals versus fitted values, helping assess the model's fit and potential heteroscedasticity. The third contrasts observed and predicted height values across different time points, offering a side-by-side evaluation of the model's predictions against actual observations.

::: blue
```{r diagnosticplots}

# Assuming your model is named `random_intercepts_slope`
# 1. Extract the random effects
random_effects <- ranef(random_intercepts_slopes)[[1]]

# 2. Convert to dataframe
random_effects_df <- data.frame(Intercept = random_effects$`(Intercept)`)

# Plot 1: Histogram
# Plot 1: Histogram
hist_plot <- ggplot(random_effects_df, aes(x = Intercept)) +
  geom_histogram(aes(y = ..density..), bins = 30, color = "black", fill = "lightblue") +
  labs(title = "Histogram of Random Effects", x = "Random Intercept Values", y = "Density") +
  theme_minimal()

print(hist_plot)



```

```{r trajectoryplot}

# Extract the data frame used in the model
model_data <- random_intercepts_slopes@frame

# Extract unique subject IDs from the model's data
original_subject_ids <- unique(model_data$src_subject_id)

# Subset the original data to include only those subjects
df_subset <- df %>% filter(src_subject_id %in% original_subject_ids)

eventname_map <- c(
  "baseline_year_1_arm_1" = "Baseline",
  "1_year_follow_up_y_arm_1" = "Year_1",
  "2_year_follow_up_y_arm_1" = "Year_2",
  "3_year_follow_up_y_arm_1" = "Year_3",
  "4_year_follow_up_y_arm_1" = "Year_4"
)

# Plot
ggplot(df, aes(x = eventname, y = anthroheightcalc, group = src_subject_id)) +
  
# Individual estimated height trajectories in faded lines
geom_line(aes(group = src_subject_id), alpha = 0.3, color = "grey50") +

# Overall group-mean trajectory in blue with increased thickness
stat_summary(aes(group = 1), fun = mean, geom = "line", color = "blue", linewidth = 1) +
labs(title = "Individual and Group-Mean Height Trajectories",
     x = "Event Name",
     y = "Height") +
  theme_minimal()


```

The provided code visualizes individual and group-mean height trajectories over different event names. Individual height trajectories for each subject are depicted as faded gray lines, allowing for a clear view of the variability among subjects. In contrast, the overall group-mean trajectory, which represents the average trend across all individuals for each event name, is highlighted in blue. The average height at r mean(df_descriptable$Height) has increased by r mean(df_descriptable$Height_followup - df_descriptable$Height) units from baseline.

## Wrapping Up
<div class = "blue">

::: panel-tabset
### Write-up {.tabset .tabset-fade .tabset-pills}

::: blue

The linear mixed model analysis was conducted to predict children's height across different time points (Baseline, Year_1, Year_2, Year_3, and Year_4). The eventname predictor was statistically significant with a p-value of r format.pval(fixed_effects$Pr(>|t|)[2], digits = 3). The model's overall ability to explain the variance in height was xxxxx, with a conditional R^2 of r report_performance(random_intercepts)$Conditional R2[1], indicating that it accounted for this proportion of the variability in height when considering both fixed and random effects. The marginal R^2 was r report_performance(random_intercepts)$Marginal R2[1], meaning that the fixed effects alone explained this proportion of the variability.

:::
:::
