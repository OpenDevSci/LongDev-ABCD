---
title: "Marginal Models"
author: "Biostatistics Working Group"
---

# Marginal Models {.unnumbered}

## Overview

<p>

Marginal models xxxxxxx. This xxxxxxx.

In this example, we will utilize marginal models to analyze xxxxxx obtained across multiple measurement occasions for a sample of youth participating in the ABCD Study. Our primary objective is to understand xxxxxx, while factoring in the clustered nature of observations within individuals over time. Marginal models facilitate this by xxxxx.

</p>

## Preliminary Setup

::: panel-tabset
### Install Packages {.tabset .tabset-fade .tabset-pills}

::: blue
> **This code installs the r packages necessary for this example, if
> they are not already installed**

```{r pckg-install}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE

# Create a list of required packages
packages_required <- c("tidyverse","lme4","geepack", "report",
                       "broom","gridExtra","easystats","gtsummary",
                       "marginaleffects")

# Check which packages are not installed and install them
packages_to_install <- setdiff(packages_required, rownames(installed.packages()))
if (length(packages_to_install) > 0) {
    install.packages(packages_to_install)
}

# Load the required packages
lapply(packages_required, library, character.only = TRUE)

```
:::

### Load Packages

::: blue
**This code loads the r libraries necessary for this example**

```{r lib-load}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE

library(tidyverse)    # Collection of R packages for data science
library(lme4)         # Linear mixed-effects models
library(geepack)      # Generalized Estimating Equations (GEE) analysis
library(report)       # Easy reporting of regression analyses
library(broom)        # Tidy and augment statistical models output
library(gridExtra)    # Arrange multiple grid-based plots on a page
library(easystats)    #
library(gtsummary)    #
library(marginaleffects) #
```
:::

### Config Options

::: blue
**This code configures knitr code chunk options**

```{r config}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE

knitr::opts_chunk$set(echo = T, message=F, warning=F, error=F, 
                      comment=NA, cache=T, code_folding=T,
                      R.options=list(width=220, digits = 3),
                      fig.align='center', 
                      out.width='75%', fig.asp=.75)
```
:::
:::

## Descriptives Overview

::: panel-tabset
### Read and View Data {.tabset .tabset-fade .tabset-pills}

::: blue
**This code reads in and shows the data to be used in the current
example**

```{r read-data}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE
#| cache: FALSE

# Set the data paths
data_path_1 <- "/Users/shawes/ABCD/data/rds/abcd_5.0_rds/demo5.0.rds"
data_path_2 <- "/Users/shawes/ABCD/data/rds/abcd_5.0_rds/core-rds-5.0/non-imaging_excluding_nt_5.0.rds"

# Read the data
data_demographics <- readRDS(data_path_1)
data_nonimaging <- readRDS(data_path_2)

# Subset the nonimaging data to include desired variables
selected_vars <- c("src_subject_id", "eventname", "nihtbx_totalcomp_fc", "anthroweightcalc", "anthroheightcalc")
subset_data <- data_nonimaging[, selected_vars]

library(dplyr)
# # Merge the datasets on 'src_subject_id' and 'eventname'
merged_data <- data_demographics %>%
  full_join(subset_data, by = c("src_subject_id", "eventname"))

# Inspect the merged data structure
str(merged_data)

# Define event names to be retained in the analysis and convert variables to appropriate data types
eventnames_to_include <- c("baseline_year_1_arm_1",
                           "1_year_follow_up_y_arm_1",
                           "2_year_follow_up_y_arm_1",
                           "3_year_follow_up_y_arm_1",
                           "4_year_follow_up_y_arm_1")

df <- merged_data %>%
  filter(eventname %in% eventnames_to_include) %>%
  mutate(
    src_subject_id = as.factor(src_subject_id),
    eventname = factor(eventname, levels = eventnames_to_include, ordered = TRUE),
    age = as.numeric(age),
    sex = as.factor(sex),
    race.4level = as.factor(race.4level),
    hisp = as.factor(hisp),
    high.educ.bl = as.factor(high.educ.bl),
    household.income.bl = as.factor(household.income.bl),
    acs_raked_propensity_score = as.numeric(acs_raked_propensity_score),
    rel_family_id.bl = as.factor(rel_family_id.bl),
    site_id_l = as.factor(site_id_l),
    nihtbx_totalcomp_fc = as.numeric(nihtbx_totalcomp_fc),
    anthroweightcalc = as.numeric(anthroweightcalc),
    anthroheightcalc = as.numeric(anthroheightcalc)
  ) %>%
  # Exclude cases from unused assessment waves
  filter(!is.na(eventname))

```
:::

### Descriptives

::: blue
**This code creates a descriptives table**

```{r descriptives}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE

descriptives_table <- df %>%
  select(eventname, sex, race.4level, hisp, anthroweightcalc) %>%
  mutate(eventname = factor(eventname, labels = c("Baseline", "Year 1","Year 2","Year 3","Year 4"))) %>%
  mutate(sex = factor(sex, labels = c("Female", "Male"))) %>%
  tbl_summary(
    by = eventname,
    missing = "no",
    label = list(sex ~ "Sex", race.4level ~ "Race", hisp ~ "Hispanic", 
                 anthroweightcalc ~ "Weight"),
    statistic = list(all_continuous() ~ "{mean} ({sd}) )", all_categorical() ~ "{p}%"),
  ) %>%
modify_header(all_stat_cols() ~ "**{level}**<br>N = {n}") %>%
  bold_labels() %>%
  italicize_levels() %>%
  modify_spanning_header(all_stat_cols() ~ "**Assessment Wave**")
theme_gtsummary_compact()

descriptives_table
```

:::
:::

## Results 
<div class = "blue">

::: panel-tabset
### Build Model {.tabset .tabset-fade .tabset-pills}

::: blue
  
The code fits a xxxx to examine the 'xxxxx' variable across time points ('eventname'). It incorporates xxxxxx. The results of the model are then printed to provide a detailed summary of the fitted model parameters.

**STEP 1: Compute xxxxx**
```{r build-model-1}
#| class.source: 'fold-hide'
#| message: FALSE
#| warning: FALSE
#| echo: TRUE

# Fitting the longitudinal marginal model
model <- geeglm(anthroweightcalc ~ eventname, data = df, id = src_subject_id, family = gaussian(), corstr = "exchangeable")
#model <- geeglm(Job_Satisfaction ~ TimePoint, data = data, id = Individual, family = #binomial(link = "logit"), corstr = "exchangeable")
```

```{r}
summary(model)
```

