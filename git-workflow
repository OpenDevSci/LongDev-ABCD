





Development Environment Setup
Objective: Ensure new team members have a smooth start by setting up their development environment efficiently.

Tools Options: Consider Nix, Docker, CodeSpaces, or shell scripts for machine setup.
Documentation: Provide a detailed document outlining steps to transform a new laptop into a fully authorized and updated endpoint, ready to run software and check in code.
Onboarding Schedule and Expectations
Objective: Give new hires a clear roadmap for their initial weeks, focusing on essential tasks and learning objectives.

Day 1-3: Setup email, Slack, and laptop.
Day 3-5: Introduction to accessing and using XYZ system.
Day 6-7: Deploy to staging environment.
Day 8-10: Write and check in scripts for simple tasks.
Resource: A single sheet including key contacts, internal sites to review, temporary credentials, and two-week goals.
Git Workflow and Commands
Objective: Simplify Git learning curve with a focus on basic commands and workflows.

Basics: Architecture, Git vs. GitHub, file stages.
Simple Workflow: Emphasize commits and branches. Introduce Pull Requests (PRs) with team demonstrations.
Avoid Complexity: Limit initial exposure to advanced features like tagging, stashes, or rebasing.
Visual Studio Integration: Provide guidance on executing Git commands within Visual Studio, enhancing toolset familiarity.
Documentation and Training
Objective: Foster self-sufficiency and adherence to best practices through comprehensive documentation.

README Guidelines: Steps for creating pull/merge requests, branch naming strategies, and code formatting requirements.
Goals and Training: Set 1, 2, and 3-month goals. Offer access to training materials and a project mimicking the production environment.
Exposure: Assign tasks to expose team members to new aspects of the stack, utilizing their strengths and facilitating growth.
Team Integration and Morale
Objective: Integrate new members into the team, fostering collaboration and ensuring they feel valued and effective.

Collaborative Tasks: Assign work that encourages exploration and deep dives into the stack, especially for teams integrating multiple new members simultaneously.
Peer Learning: Pair new members with experienced colleagues for guidance on tasks and workflows.
Impactful Projects: Assign meaningful projects with clear deadlines to demonstrate trust and set realistic expectations without pressure.
Git Advanced Workflow Assumptions
Workflow Overview: Centralized coordination through GitHub/GitLab, protected main branch, feature branch development, and PR-based changes.

Rebasing: Simplify by focusing on a small number of commits. Utilize git rebase --abort in case of issues and avoid rebasing on shared branches.
Commit Squashing: Consider squashing for a cleaner main branch history, using interactive rebase or squashing during branch merges.
Branching Strategy: Establish clear guidelines for frequent pulling/pushing and the use of feature branches.